package modrinth

import (
	"encoding/json"
	"fmt"
	"io"
	"lucy/apitypes"
	"lucy/local"
	"lucy/lucytypes"
	"net/http"
)

// TODO: Refactor to separate all API functions to accept an url. While the urls
// are generated by other functions. This will make the code more modular and
// easier to test.

var ErrorVersionNotFound = func(s string) error {
	return fmt.Errorf("version %s not found", s)
}

func listVersions(slug lucytypes.PackageName) (versions []*apitypes.ModrinthVersion) {
	res, _ := http.Get(versionsUrl(slug))
	data, _ := io.ReadAll(res.Body)
	json.Unmarshal(data, &versions)
	return
}

// getVersion is named as so because a Package in lucy is equivalent to a version
// in Modrinth.
func getVersion(id lucytypes.PackageId) (
	v *apitypes.ModrinthVersion,
	err error,
) {
	versions := listVersions(id.Name)
	for _, version := range versions {
		if version.VersionNumber == string(id.Version) &&
			versionSupportsLoader(version, id.Platform) {
			return version, nil
		}
	}
	return nil, ErrorVersionNotFound(string(id.Version))
}

func getVersionById(id string) (v *apitypes.ModrinthVersion) {
	res, _ := http.Get(versionUrl(id))
	data, _ := io.ReadAll(res.Body)
	v = &apitypes.ModrinthVersion{}
	json.Unmarshal(data, v)
	return
}

func versionSupportsLoader(
	version *apitypes.ModrinthVersion,
	loader lucytypes.Platform,
) bool {
	for _, l := range version.Loaders {
		if l == string(loader) {
			return true
		}
	}
	return false
}

func latestVersion(slug lucytypes.PackageName) (v *apitypes.ModrinthVersion) {
	versions := listVersions(slug)
	for _, version := range versions {
		if version.VersionType == "release" &&
			(v == nil || version.DatePublished.After(v.DatePublished)) {
			v = version
		}
	}
	return v
}

func LatestCompatibleVersion(slug lucytypes.PackageName) (v *apitypes.ModrinthVersion) {
	versions := listVersions(slug)
	serverInfo := local.GetServerInfo()
	for _, version := range versions {
		for _, gameVersion := range version.GameVersions {
			if gameVersion == serverInfo.Executable.GameVersion &&
				version.VersionType == "release" &&
				(v == nil || version.DatePublished.After(v.DatePublished)) {
				v = version
			}
		}
	}
	return v
}
